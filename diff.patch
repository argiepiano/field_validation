diff --git a/field_validation_ui.admin.inc b/field_validation_ui.admin.inc
index a6a93db..25dc773 100644
--- a/field_validation_ui.admin.inc
+++ b/field_validation_ui.admin.inc
@@ -55,7 +55,9 @@ function field_validation_ui_manage($instance) {
   //ctools_include('export');
   //$rules = ctools_export_load_object('field_validation_rule', 'conditions', array('entity_type' => $entity_type, 'bundle' => $bundle, 'field_name' => $field_name));
 
-  $rules = config_get('field_validation.rule.' . $entity_type . '.' . $bundle . '.' . $field_name);
+  $prefix = 'field_validation.rule.' . $entity_type . '.' . $bundle . '.' . $field_name;
+  $names = config_get_names_with_prefix($prefix);
+  $rules = config_load_multiple($names);
 
   $output .= theme('field_validation_ui_manage_overview', array('rules' => $rules, 'instance' => $instance));
   $output .= theme('field_validation_ui_manage_add_rule', array('instance' => $instance));
@@ -66,20 +68,22 @@ function field_validation_ui_manage($instance) {
 /**
  * Callback function to add or edit a validation rule.
  */
-function field_validation_ui_manage_rule($form, $form_state, $instance, $action = 'add', $validator = 'regex', $ruleid = NULL) {
+function field_validation_ui_manage_rule($form, $form_state, $instance, $action = 'add', $validator = 'field_validation_regex_validator', $machine = FALSE) {
   // $form = array();
   // $rule_validator = field_validation_get_validator_info($validator);
-  $rule_validator = array();
-  if ($action == 'overwrite') {
-    $rule = field_validation_ui_rule_load($ruleid);
-  }
-  elseif ($action == 'edit') {
-    $rule = field_validation_ui_get_rule($ruleid);
-  }
-  else {
-    $rule = new stdClass();
+  dpm($machine);
+  $field_info =  $instance['entity_type'] . '.' . $instance['bundle'] . '.' . $instance['field_name'];
+  if ($machine) {
+    // Retrieve the existing rule.
+    $config_name = 'field_validation.rule.' . $field_info . '.' . $machine;
+    $rule = config($config_name);
+    $form_state['item'] = $rule;
+
+    // Set default values.
+    $rulename = $rule->get('rulename');
+    $col = $rule->get('col');
+    $error_message = $rule->get('error_message');
   }
-  $form_state['item'] = $rule;
 
   $form['validator'] = array(
     '#type' => 'hidden',
@@ -91,63 +95,42 @@ function field_validation_ui_manage_rule($form, $form_state, $instance, $action
     '#value' => $action,
   );
 
-  if ($action == 'edit' && $rule) {
-    $form['ruleid'] = array(
-      '#type' => 'hidden',
-      '#value' => $rule->ruleid,
-    );
-
-    $form['field_name'] = array(
-      '#type' => 'hidden',
-      '#value' => $rule->field_name,
-    );
-
-    $form['entity_type'] = array(
-      '#type' => 'hidden',
-      '#value' => $rule->entity_type,
-    );
+  $form['entity_type'] = array(
+    '#type' => 'hidden',
+    '#value' => $instance['entity_type'],
+  );
 
-    $form['bundle'] = array(
-      '#type' => 'hidden',
-      '#value' => $rule->bundle,
-    );
-  }
-  else {
-    $form['field_name'] = array(
-      '#type' => 'hidden',
-      '#value' => $instance['field_name'],
-    );
+  $form['bundle'] = array(
+    '#type' => 'hidden',
+    '#value' => $instance['bundle'],
+  );
 
-    $form['entity_type'] = array(
-      '#type' => 'hidden',
-      '#value' => $instance['entity_type'],
-    );
+  $form['field_name'] = array(
+    '#type' => 'hidden',
+    '#value' => $instance['field_name'],
+  );
 
-    $form['bundle'] = array(
-      '#type' => 'hidden',
-      '#value' => $instance['bundle'],
-    );
-  }
+  $form['machine'] = array(
+    '#type' => 'machine',
+    '#default_value' => $machine ? $machine : '',
+    '#machine_name' => array(
+      'exists' => '_field_validation_ui_rule_name_exists',
+      'source' => array('rulename'),
+    ),
+    '#weight' => 2,
+    '#maxlength' => 32,
+  );
 
   $form['rulename'] = array(
     '#type' => 'textfield',
     '#title' => t('Rule name'),
-    '#default_value' => (isset($rule->rulename)) ? $rule->rulename : '',
+    '#default_value' => isset($rulename) ? $rulename : '',
     '#required' => TRUE,
     '#size' => 60,
     '#maxlength' => 255,
     '#weight' => 1,
   );
-  $form['name'] = array(
-    '#type' => 'machine_name',
-    '#default_value' => (isset($rule->name)) ? $rule->name : '',
-    '#machine_name' => array(
-      'exists' => 'field_validation_ui_rule_load',
-      'source' => array('rulename'),
-    ),
-    '#weight' => 2,
-    '#maxlength' => 32,
-  );
+
   $field = field_info_field($instance['field_name']);
   $col_options = array(
     '' => t('Choose a column'),
@@ -159,7 +142,7 @@ function field_validation_ui_manage_rule($form, $form_state, $instance, $action
 
   // Support free tagging.
   if ($field['type'] == 'taxonomy_term_reference') {
-    $col_options['name'] = 'name';
+    $col_options['machine'] = 'machine';
   }
 
   $form['col'] = array(
@@ -167,7 +150,7 @@ function field_validation_ui_manage_rule($form, $form_state, $instance, $action
     '#options' => $col_options,
     '#title' => t('Column'),
     '#description' => t('A column defined in the hook_field_schema() of this field.'),
-    '#default_value' => (isset($rule->col)) ? $rule->col : '',
+    '#default_value' => isset($col) ? $col : '',
     '#required' => TRUE,
     '#weight' => 3,
   );
@@ -197,7 +180,7 @@ function field_validation_ui_manage_rule($form, $form_state, $instance, $action
     '#required' => TRUE,
     '#size' => 60,
     '#maxlength' => 255,
-    '#default_value' => isset($rule->error_message) ? $rule->error_message : '',
+    '#default_value' => isset($error_message) ? $error_message : '',
     '#weight' => 5,
   );
 
@@ -208,10 +191,7 @@ function field_validation_ui_manage_rule($form, $form_state, $instance, $action
     foreach ($token_help as $key => $value) {
       $items[] = $key . ' == ' . $value;
     }
-    $output .= theme('item_list',
-      array(
-        'items' => $items,
-      ));
+    $output .= theme('item_list', array('items' => $items));
   }
 
   $form['token_help'] = array(
@@ -226,9 +206,8 @@ function field_validation_ui_manage_rule($form, $form_state, $instance, $action
     '#weight' => 6,
   );
 
-  $mappings = token_get_entity_mapping('entity');
-  // Print debug($mappings);
-  $token_type = isset($mappings[$instance['entity_type']]) ? $mappings[$instance['entity_type']] : "";
+  $info = entity_get_info($instance['entity_type']);
+  $token_type = $info['token type'];
   $form['token_help']['tokens'] = array(
     '#theme' => 'token_tree',
     '#token_types' => array($token_type),
@@ -237,7 +216,7 @@ function field_validation_ui_manage_rule($form, $form_state, $instance, $action
 
   $form['submit'] = array(
     '#type' => 'submit',
-    '#value' => (isset($rule->ruleid)) ? t('Save rule') : t('Add rule'),
+    '#value' => (!empty($machine)) ? t('Save rule') : t('Add rule'),
     '#weight' => 25,
   );
 
@@ -245,6 +224,7 @@ function field_validation_ui_manage_rule($form, $form_state, $instance, $action
     $form['submit']['#value'] = t('Overwrite rule');
   }
 
+  dpm($form);
   return $form;
 }
 
@@ -253,49 +233,63 @@ function field_validation_ui_manage_rule($form, $form_state, $instance, $action
  */
 function field_validation_ui_manage_rule_validate($form, &$form_state) {
   $values = $form_state['values'];
-  if ($values['action'] == 'edit') {
-    if (!is_numeric($values['ruleid']) || $values['ruleid'] == 0) {
+  if (FALSE && $values['action'] == 'edit') {
+    if (empty($values['machine'])) {
       form_set_error(NULL, t('A problem occurred while editing this rule. Please try again.'));
     }
   }
 }
 
-
 /**
  * Submit handler to add / edit a rule.
  */
 function field_validation_ui_manage_rule_submit($form, &$form_state) {
   $values = $form_state['values'];
-
-  if ($values['action'] == 'add' || $values['action'] == 'overwrite') {
-    drupal_write_record('field_validation_rule', $values);
-  }
-
-  if ($values['action'] == 'edit') {
-    drupal_write_record('field_validation_rule', $values, 'ruleid');
-  }
+  dpm($values);
+
+  // Load current file.
+  $field_info = $values['entity_type'] . '.' . $values['bundle'] . '.' . $values['field_name'];
+  $config_name = 'field_validation.rule.' . $field_info . '.' . $values['machine'];
+  $config = config($config_name);
+
+  // These will be the same every time.
+  $config->set('_module', 'field_validation');
+  $config->set('entity_type', $values['entity_type']);
+  $config->set('bundle', $values['bundle']);
+  $config->set('field_name', $values['field_name']);
+
+  // These may change
+  $config->set('rulename', $values['rulename']);
+  $config->set('machine', $values['machine']);
+  $config->set('validator', $values['validator']);
+  $config->set('col', $values['col']);
+  $config->set('error_message', $values['error_message']);
+  $config->set('settings', $values['settings']);
+
+  // Save.
+  $config->save();
 }
 
 /**
  * Confirmation form to delete a rule.
  */
-function field_validation_ui_delete_rule($form, &$form_state, $ruleid) {
-  $rule = new stdClass();
-  if (isset($ruleid) && $ruleid > 0) {
-    $rule = field_validation_ui_get_rule($ruleid);
-    $form['ruleid'] = array(
+function field_validation_ui_delete_rule($form, &$form_state, $machine) {
+  if (isset($machine)) {
+    $form['machine'] = array(
       '#type' => 'hidden',
-      '#value' => $ruleid,
+      '#value' => $machine,
     );
-  }
 
-  if (empty($rule)) {
-    $source_path = isset($_GET['destination']) ? $_GET['destination'] : "";
-    drupal_goto($source_path);
+    // Retrieve the existing rule, or create a new one.
+    $field_info = $values['entity_type'] . '.' . $values['bundle'] . '.' . $values['field_name'];
+    $config_name = 'field_validation.rule.' . $field_info . '.' . $machine;
+    $rule = config($config_name);
   }
 
+  $human_name = $rule->rulename;
+
   return confirm_form($form,
-    t('Are you sure you want to delete the rule %name?', array('%name' => $rule->rulename)),
+    t('Are you sure you want to delete the rule %name?', array('%name' => $human_name)),
     isset($_GET['destination']) ? $_GET['destination'] : $_GET['q'],
     t('This action cannot be undone.'),
     t('Delete'),
@@ -307,42 +301,37 @@ function field_validation_ui_delete_rule($form, &$form_state, $ruleid) {
  * Submit handler to delete a rule.
  */
 function field_validation_ui_delete_rule_submit($form, &$form_state) {
-  $ruleid = $form_state['values']['ruleid'];
-  db_delete('field_validation_rule')
-    ->condition('ruleid', $ruleid)
-    ->execute();
+  $values = $form_state['values'];
+  $field_info = $values['entity_type'] . '.' . $values['bundle'] . '.' . $values['field_name'];
+  $config_name = 'field_validation.rule.' . $field_info . '.' . $values['machine'];
+  $config = config($config_name);
+  $config->delete();
 }
 
 /**
  * Load a validation rule.
  *
- * @param $name
+ * @param $machine
  *   This validation rule's name value.
  *
  * @return
  *   An array of options for the specified validation rule.
  */
-function field_validation_ui_rule_load($name) {
-  // Use Ctools export API to fetch this rule.
-  // @todo switch from using ctools exports to config.
-  //ctools_include('export');
-  //$result = ctools_export_load_object('field_validation_rule', 'names', array($name));
-  dpm('name');
-
-  //$result = config_get('field_validation.rule');
-  if (isset($result[$name])) {
-    return $result[$name];
+function _field_validation_ui_rule_name_exists($machine) {
+  // @todo I don't know how to get these field values from here?!?
+  return FALSE;
+
+  $field_info = $values['entity_type'] . '.' . $values['bundle'] . '.' . $values['field_name'];
+  $prefix = 'field_validation.rule.' . $field_info;
+  $config_names = config_get_names_with_prefix($prefix);
+  foreach ($config_names as $config_name) {
+    $existing_name = str_replace($prefix, '', $config_name);
+    if ($existing_name == $machine) {
+      return TRUE;
+    }
   }
-}
 
-/**
- * Get a rule entry.
- */
-function field_validation_ui_get_rule($ruleid) {
-  $result = db_query("SELECT * FROM {field_validation_rule} WHERE ruleid = :ruleid", array(':ruleid' => $ruleid), array('fetch' => PDO::FETCH_OBJ));
-  $rule = $result->fetchObject();
-  $rule->settings = unserialize($rule->settings);
-  return $rule;
+  return FALSE;
 }
 
 /**
@@ -403,25 +392,29 @@ function theme_field_validation_ui_manage_overview($variables) {
 
   if (!empty($rules)) {
     foreach ($rules as $rule) {
+      dpm($rule);
+      $machine = $rule['machine'];
+      $validator = $rule['validator'];
+
       $row = array();
       $row[] = array(
-        'data' => $rule->rulename,
+        'data' => $rule['rulename'],
       );
       $row[] = array(
-        'data' => $validators[$rule->validator]['label'],
+        'data' => $validators[$validator]['label'],
       );
       $path = isset($_GET['q']) ? $_GET['q'] : '';
-      if (!empty($rule->ruleid)) {
+      if (!empty($rule['machine'])) {
         $row[] = array(
-          'data' => l(t('Edit'), $path . '/edit/' . $rule->validator . '/' . $rule->ruleid, array("query" => drupal_get_destination())),
+          'data' => l(t('Edit'), $path . '/edit/' . $validator . '/' . $machine, array('query' => drupal_get_destination())),
         );
         $row[] = array(
-          'data' => l(t('Delete'), $path . '/delete/' . $rule->ruleid, array("query" => drupal_get_destination())),
+          'data' => l(t('Delete'), $path . '/delete/' . $machine, array('query' => drupal_get_destination())),
         );
       }
       else {
         $row[] = array(
-          'data' => l(t('Overwrite'), $path . '/overwrite/' . $rule->validator . '/' . $rule->name, array("query" => drupal_get_destination())),
+          'data' => l(t('Overwrite'), $path . '/overwrite/' . $validator . '/' . $machine, array('query' => drupal_get_destination())),
           'colspan' => 2,
         );
       }
